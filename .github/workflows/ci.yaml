name: Build

on:
  pull_request:
    types: [synchronize, opened, reopened]
    paths-ignore:
      - 'security/**'
      - 'update/**'
  workflow_dispatch:

jobs:
  test_base:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ubuntu: [18.04, 20.04]
        arch: [x86_64, arm64]
        copt: [opt, dbg]
    steps:
      - name: Free space
        run : |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Mount bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-base-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
      - name: bazel test
        run: |
           bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //test:basic
      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: testLogs
          path: /home/runner/.cache/bazel/_bazel_runner/**/execroot/yad/bazel-out/**/testlogs/test/**/test.log
  build_java:
    runs-on: ubuntu-latest
    needs: test_base
    strategy:
      matrix:
        ubuntu: [18.04, 20.04]
        arch: [x86_64, arm64]
        copt: [opt, dbg]
        java: [adoptium, azul]
    steps:
      - name: Free space
        run : |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1
      - name: Mount bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-java-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ matrix.java }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
          restore-keys: |
            ${{ runner.os }}-bazel-base-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
      - name: bazel build
        run: |
          bazel build --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_java_8
          bazel build --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_java_11
          bazel build --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_java_17
          bazel build --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_javapy_8
          bazel build --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_javapy_11
          bazel build --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_javapy_17
  test_java:
    runs-on: ubuntu-latest
    needs: build_java
    strategy:
      matrix:
        ubuntu: [18.04, 20.04]
        arch: [x86_64, arm64]
        copt: [opt, dbg]
        java: [adoptium, azul]
    steps:
      - name: Free space
        run : |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Mount bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-java-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ matrix.java }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
      - name: bazel test
        run: |
           bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //test/java:java
      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: testLogs
          path: /home/runner/.cache/bazel/_bazel_runner/**/execroot/yad/bazel-out/**/testlogs/test/**/test.log
  build_nodejs:
    runs-on: ubuntu-latest
    needs: test_base
    strategy:
      matrix:
        ubuntu: [18.04, 20.04]
        arch: [x86_64, arm64]
        copt: [opt, dbg]
    steps:
      - name: Free space
        run : |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Mount bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-base-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
      - name: bazel test
        run: |
           bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //test/nodejs:nodejs
      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: testLogs
          path: /home/runner/.cache/bazel/_bazel_runner/**/execroot/yad/bazel-out/**/testlogs/test/**/test.log
  build_deno:
    runs-on: ubuntu-latest
    needs: test_base
    strategy:
      matrix:
        ubuntu: [18.04, 20.04]
        arch: [x86_64]
        copt: [opt, dbg]
    steps:
      - name: Free space
        run : |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Mount bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-base-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
      - name: bazel test
        run: |
           bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //test/deno:deno
      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: testLogs
          path: /home/runner/.cache/bazel/_bazel_runner/**/execroot/yad/bazel-out/**/testlogs/test/**/test.log
  build_spark:
    runs-on: ubuntu-latest
    needs: build_java
    strategy:
      matrix:
        ubuntu: [18.04, 20.04]
        arch: [x86_64, arm64]
        copt: [opt]
        java: [azul]
    steps:
      - name: Free space
        run : |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Mount bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-java-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ matrix.java }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
      - name: bazel test 2.x
        if: ${{ matrix.ubuntu == '18.04' }}
        run: |
           bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //test/spark:spark2
      - name: bazel test 3.x
        if: ${{ matrix.ubuntu == '20.04' }}
        run: |
           bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //test/spark:spark3
      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: testLogs
          path: /home/runner/.cache/bazel/_bazel_runner/**/execroot/yad/bazel-out/**/testlogs/test/**/test.log
  build_trino:
    runs-on: ubuntu-latest
    needs: build_java
    strategy:
      matrix:
        ubuntu: [20.04]
        arch: [x86_64, arm64]
        copt: [opt]
        java: [azul]
    steps:
      - name: Free space
        run : |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Mount bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-java-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ matrix.java }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
      - name: bazel test
        run: |
           bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //test/trino:trino
      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: testLogs
          path: /home/runner/.cache/bazel/_bazel_runner/**/execroot/yad/bazel-out/**/testlogs/test/**/test.log
  build_hive:
    runs-on: ubuntu-latest
    needs: build_java
    strategy:
      matrix:
        ubuntu: [20.04]
        arch: [x86_64, arm64]
        copt: [opt, dbg]
        java: [azul]
    steps:
      - name: Free space
        run : |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1
      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Mount bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-java-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ matrix.java }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
      - name: bazel test
        run: |
           bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //test/hivemetastore:hive
      - uses: actions/upload-artifact@v2
        if: ${{ failure() }}
        with:
          name: testLogs
          path: /home/runner/.cache/bazel/_bazel_runner/**/execroot/yad/bazel-out/**/testlogs/test/**/test.log