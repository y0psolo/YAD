name: Deploy

on:
  push:
    branches: [ main]
    paths-ignore:
      - 'security/**'
      - 'update/**'
      - '**/README.md'
      - '**/README.adoc'
  workflow_dispatch:
    inputs:
      forceRebuild:
        description: 'List of images to rebuild'     
        required: false
        default: ''

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      core: ${{ steps.filter.outputs.core }}
      java: ${{ steps.filter.outputs.java }}
      deno: ${{ steps.filter.outputs.deno }}
      nodejs: ${{ steps.filter.outputs.nodejs }}
      trino: ${{ steps.filter.outputs.trino }}
      spark: ${{ steps.filter.outputs.spark }}
      hive: ${{ steps.filter.outputs.hive }}
      redis: ${{ steps.filter.outputs.redis }}
      consultemplate: ${{ steps.filter.outputs.consultemplate }}
      mariadb: ${{ steps.filter.outputs.mariadb }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: .github/filters.yaml
  deploy_base:
    environment: Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ubuntu: [18.04, 20.04]
        arch: [x86_64, arm64]
        copt: [opt, dbg]
    steps:
      - name: Free space
        run : |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up QEMU
        id: qemu
        if: ${{ matrix.arch != 'x86_64' }}
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Mount bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-base-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
      - name: bazel test
        run: |
          bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //test:basic
      - name: bazel publish
        run: |
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //image:push_static
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //image:push_base
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //image:push_cc
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //image:push_python
  deploy_java:
    environment: Release
    runs-on: ubuntu-latest
    needs: [deploy_base, changes]
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.java == 'true' || needs.changes.outputs.spark == 'true' || needs.changes.outputs.hive == 'true' || needs.changes.outputs.trino == 'true' || contains(github.event.inputs.forceRebuild, 'java') }}
    strategy:
      matrix:
        ubuntu: [18.04, 20.04]
        arch: [x86_64, arm64]
        copt: [opt, dbg]
        java: [adoptium, azul]
    steps:
      - name: Free space
        run : |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up QEMU
        id: qemu
        if: ${{ matrix.arch != 'x86_64' }}
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Mount bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-java-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ matrix.java }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
          restore-keys: |
            ${{ runner.os }}-bazel-base-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
      - name: bazel test
        run: |
           bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //test/java:java
      - name: bazel deploy
        run: |
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_java_8
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_java_11
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_java_17
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_javapy_8
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_javapy_11
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_javapy_17
  deploy_nodejs:
    environment: Release
    runs-on: ubuntu-latest
    needs: [deploy_base, changes]
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.nodejs == 'true' || contains(github.event.inputs.forceRebuild, 'nodejs') }}
    strategy:
      matrix:
        ubuntu: [18.04, 20.04]
        arch: [x86_64, arm64]
        copt: [opt, dbg]
    steps:
      - name: Free space
        run : |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up QEMU
        id: qemu
        if: ${{ matrix.arch != 'x86_64' }}
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Mount bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-base-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
      - name: bazel test
        run: |
           bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //test/nodejs:nodejs
      - name: bazel deploy
        run: |
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_nodejs_14
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_nodejs_16
  deploy_deno:
    environment: Release
    runs-on: ubuntu-latest
    needs: [deploy_base, changes]
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.deno == 'true' || contains(github.event.inputs.forceRebuild, 'deno') }}
    strategy:
      matrix:
        ubuntu: [18.04, 20.04]
        arch: [x86_64]
        copt: [opt, dbg]
    steps:
      - name: Free space
        run : |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up QEMU
        id: qemu
        if: ${{ matrix.arch != 'x86_64' }}
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Mount bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-base-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
      - name: bazel test
        run: |
           bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //test/deno:deno
      - name: bazel deploy
        run: |
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_deno
  deploy_spark:
    environment: Release
    runs-on: ubuntu-latest
    needs: [deploy_java, changes]
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.java == 'true' || needs.changes.outputs.spark == 'true' || contains(github.event.inputs.forceRebuild, 'spark') }}
    strategy:
      matrix:
        ubuntu: [18.04, 20.04]
        arch: [x86_64, arm64]
        copt: [opt]
        java: [azul]
    steps:
      - name: Free space
        run : |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up QEMU
        id: qemu
        if: ${{ matrix.arch != 'x86_64' }}
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Mount bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-java-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ matrix.java }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
      - name: bazel test 2.x
        if: ${{ matrix.ubuntu == '18.04' && matrix.arch  == 'x86_64' }}
        run: |
           bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //test/spark:spark2
      - name: bazel test 3.x
        if: ${{ matrix.ubuntu == '20.04' && matrix.arch  == 'x86_64' }}
        run: |
           bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //test/spark:spark3
      - name: bazel deploy 2.4
        if: ${{ matrix.ubuntu == '18.04' }}
        run: |
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_spark_2.4
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_pyspark_2.4
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_sparkhistoryserver_2.4
      - name: bazel deploy 3.0
        if: ${{ matrix.ubuntu == '20.04' }}
        run: |
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_spark_3.0
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_pyspark_3.0
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_sparkhistoryserver_3.0
      - name: bazel deploy 3.1
        if: ${{ matrix.ubuntu == '20.04' }}
        run: |
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_spark_3.1
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_pyspark_3.1
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_sparkhistoryserver_3.1
      - name: bazel deploy 3.2
        if: ${{ matrix.ubuntu == '20.04' }}
        run: |
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_spark_3.2
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_pyspark_3.2
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_sparkhistoryserver_3.2
  deploy_trino:
    environment: Release
    runs-on: ubuntu-latest
    needs: [deploy_java, changes]
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.java == 'true' || needs.changes.outputs.trino == 'true' || contains(github.event.inputs.forceRebuild, 'trino') }}
    strategy:
      matrix:
        ubuntu: [20.04]
        arch: [x86_64, arm64]
        copt: [opt]
        java: [azul]
    steps:
      - name: Free space
        run : |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1
      - name: Set up QEMU
        id: qemu
        if: ${{ matrix.arch != 'x86_64' }}
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Mount bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-java-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ matrix.java }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
      - name: bazel test
        run: |
           bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //test/trino:trino
      - name: bazel deploy
        run: |
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_trino_server
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_trino_cli
  deploy_hive:
    environment: Release
    runs-on: ubuntu-latest
    needs: [deploy_java, changes]
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.java == 'true' || needs.changes.outputs.hive == 'true' || contains(github.event.inputs.forceRebuild, 'hive') }}
    strategy:
      matrix:
        ubuntu: [20.04]
        arch: [x86_64, arm64]
        copt: [opt, dbg]
        java: [azul]
    steps:
      - name: Free space
        run : |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up QEMU
        id: qemu
        if: ${{ matrix.arch != 'x86_64' }}
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Mount bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-java-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ matrix.java }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
      - name: bazel test
        run: |
           bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //test/hivemetastore:hive
      - name: bazel deploy
        run: |
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} --java=${{ matrix.java }} //image:push_hivemetastore
  deploy_redis:
    environment: Release
    runs-on: ubuntu-latest
    needs: [deploy_base, changes]
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.redis == 'true' || contains(github.event.inputs.forceRebuild, 'redis') }}
    strategy:
      matrix:
        ubuntu: [20.04]
        arch: [x86_64, arm64]
        copt: [opt]
    steps:
      - name: Free space
        run : |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1
      - name: Install crossbuild package
        if: ${{ matrix.arch == 'arm64' }}
        run : |
          sudo apt install crossbuild-essential-arm64
      - name: Set up QEMU
        id: qemu
        if: ${{ matrix.arch != 'x86_64' }}
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Mount bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-base-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
      - name: bazel test
        run: |
           bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //test/redis:redis
      - name: bazel deploy
        run: |
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //image:push_redis_server
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //image:push_redis_cli
  deploy_consultemplate:
    environment: Release
    runs-on: ubuntu-latest
    needs: [deploy_base, changes]
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.consultemplate == 'true' || contains(github.event.inputs.forceRebuild, 'consultemplate') }}
    strategy:
      matrix:
        ubuntu: [20.04]
        arch: [x86_64, arm64]
        copt: [opt]
    steps:
      - name: Free space
        run : |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up QEMU
        id: qemu
        if: ${{ matrix.arch != 'x86_64' }}
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Mount bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-base-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
      - name: bazel test
        run: |
           bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //test/consultemplate:consultemplate
      - name: bazel deploy
        run: |
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //image:push_consultemplate
  deploy_mariadb:
    environment: Release
    runs-on: ubuntu-latest
    needs: [deploy_base, changes]
    if: ${{ needs.changes.outputs.core == 'true' || needs.changes.outputs.mariadb == 'true' || contains(github.event.inputs.forceRebuild, 'mariadb') }}
    strategy:
      matrix:
        ubuntu: [18.04, 20.04]
        arch: [x86_64, arm64]
        copt: [opt]
    steps:
      - name: Free space
        run : |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Setup Bazelisk
        uses: bazelbuild/setup-bazelisk@v1
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up QEMU
        id: qemu
        if: ${{ matrix.arch != 'x86_64' }}
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: all
      - name: Mount bazel cache
        uses: actions/cache@v2
        with:
          path: "~/.cache/bazel"
          key: ${{ runner.os }}-bazel-base-${{ matrix.arch }}-${{ matrix.copt }}-${{ matrix.ubuntu }}-${{ hashFiles('**/BUILD', '**/*.bzl', 'WORKSPACE') }}
      - name: bazel test
        run: |
           bazel test --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //test/mariadb:mariadb
      - name: bazel deploy
        run: |
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //image:push_mariadb_server_10.5
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //image:push_mariadb_server_10.6
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //image:push_mariadb_server_10.7
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //image:push_mariadb_cli_10.5
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //image:push_mariadb_cli_10.6
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //image:push_mariadb_cli_10.7
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //image:push_mariadb_init_10.5
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //image:push_mariadb_init_10.6
          bazel run --config ${{ matrix.arch }} -c ${{ matrix.copt }} --distro=${{ matrix.ubuntu }} //image:push_mariadb_init_10.7
  base_tags:
    environment: Release
    runs-on: ubuntu-latest
    needs: deploy_base
    strategy:
      matrix:
        ubuntu: [bionic, focal]
    steps:
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: merge tags
        run: hack/merge_tag_base.sh ${{ matrix.ubuntu }}
  java_tags:
    environment: Release
    runs-on: ubuntu-latest
    needs: deploy_java
    strategy:
      matrix:
        ubuntu: [bionic, focal]
    steps:
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: merge tags
        run: hack/merge_tag_java.sh ${{ matrix.ubuntu }}
  nodejs_tags:
    environment: Release
    runs-on: ubuntu-latest
    needs: deploy_nodejs
    strategy:
      matrix:
        ubuntu: [bionic, focal]
    steps:
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: merge tags
        run: hack/merge_tag_nodejs.sh ${{ matrix.ubuntu }}
  deno_tags:
    environment: Release
    runs-on: ubuntu-latest
    needs: deploy_deno
    strategy:
      matrix:
        ubuntu: [bionic, focal]
    steps:
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: merge tags
        run: hack/merge_tag_deno.sh ${{ matrix.ubuntu }}
  spark_tags:
    environment: Release
    runs-on: ubuntu-latest
    needs: deploy_spark
    strategy:
      matrix:
        ubuntu: [bionic, focal]
    steps:
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: merge tags
        run: hack/merge_tag_spark.sh ${{ matrix.ubuntu }}
  hive_tags:
    environment: Release
    runs-on: ubuntu-latest
    needs: deploy_hive
    strategy:
      matrix:
        ubuntu: [focal]
    steps:
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: merge tags
        run: hack/merge_tag_hive.sh ${{ matrix.ubuntu }}
  trino_tags:
    environment: Release
    runs-on: ubuntu-latest
    needs: deploy_trino
    strategy:
      matrix:
        ubuntu: [focal]
    steps:
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: merge tags
        run: hack/merge_tag_trino.sh ${{ matrix.ubuntu }}
  redis_tags:
    environment: Release
    runs-on: ubuntu-latest
    needs: deploy_redis
    strategy:
      matrix:
        ubuntu: [focal]
    steps:
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: merge tags
        run: hack/merge_tag_redis.sh ${{ matrix.ubuntu }}
  consultemplate_tags:
    environment: Release
    runs-on: ubuntu-latest
    needs: deploy_consultemplate
    strategy:
      matrix:
        ubuntu: [focal]
    steps:
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: merge tags
        run: hack/merge_tag_consultemplate.sh ${{ matrix.ubuntu }}
  mariadb_tags:
    environment: Release
    runs-on: ubuntu-latest
    needs: deploy_mariadb
    strategy:
      matrix:
        ubuntu: [focal, bionic]
    steps:
      - name: Setup repository
        uses: actions/checkout@v2
      - name: Docker Login
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: merge tags
        run: hack/merge_tag_mariadb.sh ${{ matrix.ubuntu }}
  # sign:
  #   environment: Release
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #     - name: Setup repository
  #       uses: actions/checkout@v2
  #     - name: Docker Login
  #       uses: docker/login-action@v1
  #       with:
  #         registry: docker.io
  #         username: ${{ secrets.DOCKER_LOGIN }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}
  #     - name: Install Cosign
  #       uses: sigstore/cosign-installer@main
  #       with:
  #         cosign-release: 'v1.4.0'
  #     - name: cosign image
  #       env:
  #         COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
  #       run: hack/cosign.sh docker.io
